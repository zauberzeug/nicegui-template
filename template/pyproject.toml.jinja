{%- import 'py-versions.jinja' as python -%}
[build-system]
requires = [
    {%- if use_poetry_dynamic_versioning %}
    "poetry-core>=1.0.0",
    "poetry-dynamic-versioning>=1.0.0,<2.0.0",
    {%- elif use_poetry %}
    "poetry-core",
    {%- else %}
    "hatchling",
    {%- endif %}
]
build-backend = "{% if use_poetry_dynamic_versioning -%}
poetry_dynamic_versioning.backend
{%- elif use_poetry -%}
poetry.core.masonry.api
{%- else -%}
hatchling.build
{%- endif %}"

[project]
name = "{{ project_name }}"
version = "{% if use_poetry_dynamic_versioning %}0.0.0{% else %}0.1.0-dev{% endif %}"
description = "{{ project_description }}"
authors = [{ name="Zauberzeug GmbH", email="info@zauberzeug.com" }]
readme = "README.md"
requires-python = "{{ python.range(python_versions) }}"
{%- if use_poetry %}
dependencies = [
    "nicegui >= 2.15.0",
    {%- if use_rosys %}
    "rosys >= 0.27.0",
    {%- endif %}
]

[project.optional-dependencies]
dev = [
    "mypy (>=1.18.2, <2.0.0)",
    "pylint (>=3.3.3, <4.0.0)",
    {%- if use_precommit %}
    "pre-commit (>=4.3.0, <5.0.0)",
    {%- endif %}
    "ruff (>=0.13.2, <1.0.0)",
    "autopep8 (>=2.3.2, <3.0.0)",,
    {%- if use_poetry_dynamic_versioning %}
    "poetry-dynamic-versioning (>=1.8.0, <2.0.0)",
    {%- endif %}
]
test = [
    "pytest (>=8.3.4, <9.0.0)",
    "pytest-asyncio (>=0.25.3, <0.26.0)",
]

[tool.poetry]
package-mode = false
{%- endif %}
{%- if use_poetry_dynamic_versioning %}

[tool.poetry-dynamic-versioning]
enable = true
vcs = "git"
style = "pep440"
{%- endif %}

[tool.mypy]
python_version = "{{ python.min(python_versions) }}"
check_untyped_defs = true

[tool.pylint]
disable = [
    "C0301", # Line too long
    "C0114", # Missing module docstring
    "C0116", # Missing function or method docstring
    "R0903", # Too few public methods
]

[tool.ruff]
line-length = 120
indent-width = 4
target-version = "py{{ python.min(python_versions) | replace('.', '') }}"

[tool.ruff.lint]
select = [
    "E",  # pycodestyle
    "F",  # pyflakes
    "W",  # pycodestyle
    "B",  # bugbear
    "I",  # isort
    "RUF", # ruff
    "UP", # pyupgrade
    "PL", # pylint
]
fixable = [
    "I", # isort
    "RUF022", # `__all__` is not sorted
]
ignore = [
    "E501", # line too long
]

[tool.pytest.ini_options]
asyncio_mode = "auto"
# NOTE: changing default location of pytest_cache because the uvicorn file watcher somehow triggered too many reloads
cache_dir = "../.pytest_cache"
testpaths = [
    "tests"
]
